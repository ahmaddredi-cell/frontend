"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/layout",{

/***/ "(app-pages-browser)/./lib/api/api-client.ts":
/*!*******************************!*\
  !*** ./lib/api/api-client.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\n/* harmony import */ var _lib_utils_notifications__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/utils/notifications */ \"(app-pages-browser)/./lib/utils/notifications.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\r\n * API Client Module\r\n * \r\n * This module provides a unified way to interact with the backend API.\r\n * It handles common concerns like:\r\n * - Authentication headers\r\n * - Error handling\r\n * - Request/response interceptors\r\n * - Refreshing tokens\r\n */ \n// API base URL\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:5000/api\";\n// API client class\nclass ApiClient {\n    // Get the authentication token from local storage\n    getAuthToken() {\n        if (true) {\n            return localStorage.getItem(\"authToken\");\n        }\n        return null;\n    }\n    // Set the authentication token in local storage\n    setAuthToken(token) {\n        if (true) {\n            localStorage.setItem(\"authToken\", token);\n            console.log(\"Auth token set, length:\", token.length);\n        }\n    }\n    // Remove the authentication token from local storage\n    removeAuthToken() {\n        if (true) {\n            localStorage.removeItem(\"authToken\");\n            console.log(\"Auth token removed\");\n        }\n    }\n    // Check if the user is authenticated\n    isAuthenticated() {\n        return !!this.getAuthToken();\n    }\n    // Refresh the access token using refresh token\n    async refreshAccessToken() {\n        try {\n            var _data_data;\n            const refreshToken = localStorage.getItem(\"refreshToken\");\n            if (!refreshToken) {\n                console.log(\"No refresh token found\");\n                return false;\n            }\n            console.log(\"Attempting to refresh token\");\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/refresh-token\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    refreshToken\n                }),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                console.log(\"Token refresh response not OK:\", response.status);\n                return false;\n            }\n            const data = await response.json();\n            console.log(\"Token refresh response:\", data);\n            if (data.success && ((_data_data = data.data) === null || _data_data === void 0 ? void 0 : _data_data.token)) {\n                this.setAuthToken(data.data.token);\n                // Also update refresh token if provided\n                if (data.data.refreshToken) {\n                    localStorage.setItem(\"refreshToken\", data.data.refreshToken);\n                }\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error(\"Failed to refresh token:\", error);\n            return false;\n        }\n    }\n    // Handle API errors\n    async handleError(error, originalRequest) {\n        console.error(\"API Error:\", error);\n        // Network error\n        if (!error.response) {\n            _lib_utils_notifications__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error(\"خطأ في الاتصال بالخادم\");\n            return {\n                success: false,\n                message: \"خطأ في الاتصال بالخادم\",\n                statusCode: 0\n            };\n        }\n        // Handle different status codes\n        const { status, data } = error.response;\n        if (status === 401) {\n            // Check if this is already a retry after token refresh\n            if (originalRequest && originalRequest.isRetry) {\n                // Token refresh failed or expired again, redirect to login\n                this.removeAuthToken();\n                localStorage.removeItem(\"refreshToken\");\n                window.location.href = \"/login\";\n                return {\n                    success: false,\n                    message: \"انتهت صلاحية الجلسة، يرجى تسجيل الدخول مرة أخرى\",\n                    statusCode: status\n                };\n            }\n            // Try to refresh the token\n            const refreshSuccess = await this.refreshAccessToken();\n            if (refreshSuccess && originalRequest) {\n                // Retry the original request with the new token\n                const { endpoint, method, data, options } = originalRequest;\n                return this.request(endpoint, method, data, options, true);\n            } else {\n                // Refresh failed, redirect to login\n                this.removeAuthToken();\n                localStorage.removeItem(\"refreshToken\");\n                window.location.href = \"/login\";\n                return {\n                    success: false,\n                    message: \"انتهت صلاحية الجلسة، يرجى تسجيل الدخول مرة أخرى\",\n                    statusCode: status\n                };\n            }\n        }\n        if (status === 403) {\n            _lib_utils_notifications__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error(\"ليس لديك صلاحية للوصول إلى هذا المورد\");\n            return {\n                success: false,\n                message: \"ليس لديك صلاحية للوصول إلى هذا المورد\",\n                statusCode: status\n            };\n        }\n        if (status === 404) {\n            return {\n                success: false,\n                message: \"المورد غير موجود\",\n                statusCode: status\n            };\n        }\n        if (status === 422 || status === 400) {\n            const errorMsg = data.message || \"بيانات غير صالحة\";\n            _lib_utils_notifications__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error(errorMsg);\n            return {\n                success: false,\n                message: errorMsg,\n                errors: data.errors || [],\n                statusCode: status\n            };\n        }\n        // Default error\n        const errorMsg = data.message || \"حدث خطأ ما\";\n        _lib_utils_notifications__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error(errorMsg);\n        return {\n            success: false,\n            message: errorMsg,\n            statusCode: status\n        };\n    }\n    // Make an API request\n    async request(endpoint) {\n        let method = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"GET\", data = arguments.length > 2 ? arguments[2] : void 0, options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {\n            requiresAuth: true\n        }, isRetry = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;\n        const url = \"\".concat(API_BASE_URL).concat(endpoint);\n        const { requiresAuth = true, contentType = \"application/json\" } = options;\n        // Prepare headers\n        const headers = {\n            \"Content-Type\": contentType\n        };\n        // Add authorization header if required\n        if (requiresAuth) {\n            const token = this.getAuthToken();\n            if (!token) {\n                window.location.href = \"/login\";\n                return {\n                    success: false,\n                    message: \"غير مصرح، يرجى تسجيل الدخول\",\n                    statusCode: 401\n                };\n            }\n            headers[\"Authorization\"] = \"Bearer \".concat(token);\n        }\n        // Prepare request options\n        const requestOptions = {\n            method,\n            headers,\n            credentials: \"include\"\n        };\n        // Add body for non-GET requests\n        if (method !== \"GET\" && data) {\n            if (contentType === \"application/json\") {\n                requestOptions.body = JSON.stringify(data);\n            } else if (data instanceof FormData) {\n                requestOptions.body = data;\n                // Remove Content-Type header to let the browser set it with the boundary\n                delete headers[\"Content-Type\"];\n            }\n        }\n        try {\n            console.log(\"Making \".concat(method, \" request to \").concat(url), {\n                requiresAuth,\n                headers\n            });\n            const response = await fetch(url, requestOptions);\n            console.log(\"Response status:\", response.status);\n            const contentType = response.headers.get(\"content-type\");\n            let responseData;\n            if (contentType && contentType.includes(\"application/json\")) {\n                responseData = await response.json();\n                console.log(\"Response data:\", responseData);\n            } else {\n                const text = await response.text();\n                console.log(\"Response text:\", text);\n                try {\n                    responseData = JSON.parse(text);\n                } catch (e) {\n                    responseData = {\n                        message: text\n                    };\n                }\n            }\n            if (!response.ok) {\n                throw {\n                    response: {\n                        status: response.status,\n                        data: responseData\n                    }\n                };\n            }\n            // Handle direct data format or { success, data, message } format\n            if (responseData.success !== undefined) {\n                return {\n                    success: responseData.success,\n                    data: responseData.data,\n                    message: responseData.message,\n                    statusCode: response.status\n                };\n            }\n            // If API returns direct data without wrapping\n            return {\n                success: true,\n                data: responseData,\n                statusCode: response.status\n            };\n        } catch (error) {\n            // Store the original request information for potential retry after token refresh\n            const originalRequest = {\n                endpoint,\n                method,\n                data,\n                options,\n                isRetry\n            };\n            return this.handleError(error, originalRequest);\n        }\n    }\n    // HTTP methods\n    async get(endpoint, options) {\n        return this.request(endpoint, \"GET\", undefined, options);\n    }\n    async post(endpoint, data, options) {\n        return this.request(endpoint, \"POST\", data, options);\n    }\n    async put(endpoint, data, options) {\n        return this.request(endpoint, \"PUT\", data, options);\n    }\n    async patch(endpoint, data, options) {\n        return this.request(endpoint, \"PATCH\", data, options);\n    }\n    async delete(endpoint, options) {\n        return this.request(endpoint, \"DELETE\", undefined, options);\n    }\n    // Upload file(s) with FormData with enhanced debugging\n    async uploadFile(endpoint, formData, options) {\n        // Log what's in the FormData for debugging\n        console.log(\"Uploading file to endpoint:\", endpoint);\n        console.log(\"FormData entries:\");\n        for (const pair of formData.entries()){\n            if (pair[1] instanceof File) {\n                const file = pair[1];\n                console.log(\"- Field: \".concat(pair[0], \", File: \").concat(file.name, \", Type: \").concat(file.type, \", Size: \").concat(file.size, \" bytes\"));\n            } else {\n                console.log(\"- Field: \".concat(pair[0], \", Value: \").concat(pair[1]));\n            }\n        }\n        return this.request(endpoint, \"POST\", formData, {\n            ...options,\n            contentType: \"multipart/form-data\"\n        });\n    }\n}\n// Create and export a singleton instance\nconst apiClient = new ApiClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api/api-client.ts\n"));

/***/ })

});